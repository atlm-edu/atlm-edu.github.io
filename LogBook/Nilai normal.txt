<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Laboratory Reference Range Tool</title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.1/font/bootstrap-icons.css">
    <style>
        .result-box {
            background-color: #f8f9fa;
            border-radius: 5px;
            padding: 15px;
            margin-top: 20px;
        }
        .normal-range {
            color: green;
            font-weight: bold;
        }
        .abnormal-range {
            color: red;
            font-weight: bold;
        }
        #loading {
            display: flex;
            justify-content: center;
            padding: 40px;
        }
    </style>
</head>
<body>
    <div class="container py-4">
        <h1 class="text-center mb-4">Laboratory Reference Range Tool</h1>
        
        <!-- Search and Filter Section -->
        <div class="row mb-4">
            <div class="col-md-6 mb-3">
                <div class="input-group">
                    <input type="text" id="searchInput" class="form-control" placeholder="Search for a lab test...">
                    <button class="btn btn-primary" id="searchBtn">Search</button>
                </div>
            </div>
            <div class="col-md-6">
                <select id="categorySelect" class="form-select">
                    <option value="all">All Categories</option>
                    <!-- Categories will be populated from data -->
                </select>
            </div>
        </div>

        <!-- Advanced Filters -->
        <div class="row mb-4">
            <div class="col-12">
                <div class="card">
                    <div class="card-header bg-light">
                        <button class="btn btn-sm btn-outline-secondary" type="button" data-bs-toggle="collapse" data-bs-target="#advancedFilters">
                            Advanced Filters <i class="bi bi-funnel"></i>
                        </button>
                    </div>
                    <div id="advancedFilters" class="collapse">
                        <div class="card-body">
                            <div class="row">
                                <div class="col-md-4">
                                    <label class="form-label">Sample Type</label>
                                    <select id="sampleTypeFilter" class="form-select form-select-sm">
                                        <option value="all">All Sample Types</option>
                                        <!-- Sample types will be populated from data -->
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Population</label>
                                    <select id="populationFilter" class="form-select form-select-sm">
                                        <option value="all">All Populations</option>
                                        <!-- Populations will be populated from data -->
                                    </select>
                                </div>
                                <div class="col-md-4">
                                    <label class="form-label">Sort By</label>
                                    <select id="sortOrder" class="form-select form-select-sm">
                                        <option value="name-asc">Test Name (A-Z)</option>
                                        <option value="name-desc">Test Name (Z-A)</option>
                                        <option value="category">Category</option>
                                        <option value="component">Component</option>
                                    </select>
                                </div>
                            </div>
                            <div class="mt-3">
                                <button id="applyFilters" class="btn btn-sm btn-primary">Apply Filters</button>
                                <button id="resetFilters" class="btn btn-sm btn-outline-secondary ms-2">Reset</button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        
        <!-- Results area -->
        <div id="loading">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
        </div>
        
        <div id="resultsArea" class="d-none">
            <div class="table-responsive">
                <table class="table table-striped table-hover">
                    <thead class="table-dark">
                        <tr>
                            <th>Test</th>
                            <th>Component</th>
                            <th>Population</th>
                            <th>Reference Range</th>
                            <th>Units</th>
                            <th>Sample Type</th>
                            <th>Details</th>
                        </tr>
                    </thead>
                    <tbody id="resultsTable">
                        <!-- Results will be populated here -->
                    </tbody>
                </table>
            </div>
            <div id="pagination" class="d-flex justify-content-center mt-3">
                <!-- Pagination controls will go here -->
            </div>
        </div>
        
        <!-- Modal for test details -->
        <div class="modal fade" id="testDetailModal" tabindex="-1" aria-labelledby="testDetailModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg">
                <div class="modal-content">
                    <div class="modal-header">
                        <h5 class="modal-title" id="testDetailModalLabel">Test Details</h5>
                        <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                    </div>
                    <div class="modal-body" id="testDetailContent">
                        <!-- Test details will be populated here -->
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        
        <footer class="mt-5 py-3 bg-light">
            <div class="container">
                <h4>References and Resources</h4>
                <ul>
                    <li>Tietz Textbook of Clinical Chemistry and Molecular Diagnostics, 6th Edition</li>
                    <li>Henry's Clinical Diagnosis and Management by Laboratory Methods, 24th Edition</li>
                    <li>Clinical Laboratory Standards Institute (CLSI) Guidelines</li>
                    <li>American Association for Clinical Chemistry (AACC)</li>
                    <li>World Health Organization (WHO) Laboratory Manual</li>
                </ul>
                <p class="text-muted">Note: Reference ranges may vary between laboratories. Always refer to the specific ranges used by your institution.</p>
                <p class="text-center mt-3">&copy; 2025 Medical Laboratory E-Learning Tool</p>
            </div>
        </footer>
    </div>
        
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/papaparse@5.3.2/papaparse.min.js"></script>
    <script>
// Configuration
const csvUrl = 'https://docs.google.com/spreadsheets/d/1mkRj1QGuKzTWxHZwDS43OViHsdBh0VdQ1fIrJJNhy3I/edit?usp=sharing';  // Replace with your published URL
const itemsPerPage = 20;
let currentPage = 1;
let labData = [];
let filteredData = [];

// Unique values for filter dropdowns
let categories = new Set();
let sampleTypes = new Set();
let populations = new Set();

// Fetch CSV data from Google Sheets
function fetchLabData() {
    Papa.parse(csvUrl, {
        download: true,
        header: true,
        skipEmptyLines: true,
        complete: function(results) {
            document.getElementById('loading').style.display = 'none';
            document.getElementById('resultsArea').classList.remove('d-none');
            
            labData = results.data.filter(item => 
                item['Test Name'] && item['Component'] && 
                item['Lower Limit'] && item['Upper Limit']
            );
            
            // Process the data
            processData(labData);
            
            // Populate dropdowns
            populateDropdowns();
            
            // Show initial results
            filterAndDisplayResults();
        },
        error: function(error) {
            document.getElementById('loading').innerHTML = 
                `<div class="alert alert-danger">Error loading data: ${error}</div>`;
        }
    });
}

// Process data to extract unique values for filters
function processData(data) {
    data.forEach(item => {
        if (item.Category) categories.add(item.Category.trim());
        if (item['Sample Type']) sampleTypes.add(item['Sample Type'].trim());
        if (item.Population) populations.add(item.Population.trim());
    });
}

// Populate dropdown filters with unique values
function populateDropdowns() {
    const categorySelect = document.getElementById('categorySelect');
    const sampleTypeFilter = document.getElementById('sampleTypeFilter');
    const populationFilter = document.getElementById('populationFilter');
    
    // Clear existing options except the first one
    categorySelect.innerHTML = '<option value="all">All Categories</option>';
    sampleTypeFilter.innerHTML = '<option value="all">All Sample Types</option>';
    populationFilter.innerHTML = '<option value="all">All Populations</option>';
    
    // Add categories
    Array.from(categories).sort().forEach(category => {
        const option = document.createElement('option');
        option.value = category;
        option.textContent = category;
        categorySelect.appendChild(option);
    });
    
    // Add sample types
    Array.from(sampleTypes).sort().forEach(sampleType => {
        const option = document.createElement('option');
        option.value = sampleType;
        option.textContent = sampleType;
        sampleTypeFilter.appendChild(option);
    });
    
    // Add populations
    Array.from(populations).sort().forEach(population => {
        const option = document.createElement('option');
        option.value = population;
        option.textContent = population;
        populationFilter.appendChild(option);
    });
}

// Filter data based on user selections and display results
function filterAndDisplayResults() {
    const searchTerm = document.getElementById('searchInput').value.toLowerCase();
    const category = document.getElementById('categorySelect').value;
    const sampleType = document.getElementById('sampleTypeFilter').value;
    const population = document.getElementById('populationFilter').value;
    const sortOrder = document.getElementById('sortOrder').value;
    
    // Apply filters
    filteredData = labData.filter(item => {
        const testNameMatch = item['Test Name']?.toLowerCase().includes(searchTerm) || 
                             item.Component?.toLowerCase().includes(searchTerm);
        const categoryMatch = category === 'all' || item.Category === category;
        const sampleTypeMatch = sampleType === 'all' || item['Sample Type'] === sampleType;
        const populationMatch = population === 'all' || item.Population === population;
        
        return testNameMatch && categoryMatch && sampleTypeMatch && populationMatch;
    });
    
    // Apply sorting
    switch(sortOrder) {
        case 'name-asc':
            filteredData.sort((a, b) => (a['Test Name'] || '').localeCompare(b['Test Name'] || ''));
            break;
        case 'name-desc':
            filteredData.sort((a, b) => (b['Test Name'] || '').localeCompare(a['Test Name'] || ''));
            break;
        case 'category':
            filteredData.sort((a, b) => (a.Category || '').localeCompare(b.Category || ''));
            break;
        case 'component':
            filteredData.sort((a, b) => (a.Component || '').localeCompare(b.Component || ''));
            break;
    }
    
    // Reset to first page when filtering
    currentPage = 1;
    
    // Display results
    displayResults();
    
    // Update pagination
    updatePagination();
}

// Display filtered results in the table
function displayResults() {
    const resultsTable = document.getElementById('resultsTable');
    resultsTable.innerHTML = '';
    
    // Calculate page slice
    const startIndex = (currentPage - 1) * itemsPerPage;
    const endIndex = startIndex + itemsPerPage;
    const pageData = filteredData.slice(startIndex, endIndex);
    
    if (pageData.length === 0) {
        resultsTable.innerHTML = `
            <tr>
                <td colspan="7" class="text-center">No results found. Try adjusting your filters.</td>
            </tr>
        `;
        return;
    }
    
    // Create table rows
    pageData.forEach((item, index) => {
        const row = document.createElement('tr');
        row.innerHTML = `
            <td>${item['Test Name'] || ''}</td>
            <td>${item.Component || ''}</td>
            <td>${item.Population || 'All'}</td>
            <td class="normal-range">${item['Lower Limit'] || ''}-${item['Upper Limit'] || ''}</td>
            <td>${item.Units || ''}</td>
            <td>${item['Sample Type'] || ''}</td>
            <td>
                <button class="btn btn-sm btn-info" 
                        data-bs-toggle="modal" 
                        data-bs-target="#testDetailModal"
                        data-index="${startIndex + index}">
                    View
                </button>
            </td>
        `;
        resultsTable.appendChild(row);
    });
    
    // Add event listeners to detail buttons
    document.querySelectorAll('[data-bs-target="#testDetailModal"]').forEach(button => {
        button.addEventListener('click', function() {
            const index = parseInt(this.getAttribute('data-index'));
            showTestDetails(filteredData[index]);
        });
    });
}

// Show detailed information in the modal
function showTestDetails(item) {
    const modalTitle = document.getElementById('testDetailModalLabel');
    const modalContent = document.getElementById('testDetailContent');
    
    modalTitle.textContent = `${item['Test Name']} - ${item.Component}`;
    
    modalContent.innerHTML = `
        <div class="card mb-3">
            <div class="card-header bg-primary text-white">
                <h5 class="mb-0">Reference Range Information</h5>
            </div>
            <div class="card-body">
                <table class="table table-bordered">
                    <tr>
                        <th>Category:</th>
                        <td>${item.Category || ''}</td>
                    </tr>
                    <tr>
                        <th>Population:</th>
                        <td>${item.Population || 'All'}</td>
                    </tr>
                    <tr>
                        <th>Reference Range:</th>
                        <td class="normal-range">${item['Lower Limit'] || ''}-${item['Upper Limit'] || ''} ${item.Units || ''}</td>
                    </tr>
                    <tr>
                        <th>Sample Type:</th>
                        <td>${item['Sample Type'] || ''}</td>
                    </tr>
                </table>
            </div>
        </div>
        
        <div class="card">
            <div class="card-header bg-info text-white">
                <h5 class="mb-0">Clinical Information</h5>
            </div>
            <div class="card-body">
                <h6>Interpretation:</h6>
                <p>${item.Interpretation || 'No interpretation information available.'}</p>
                
                <h6>Clinical Significance:</h6>
                <p>${item['Clinical Significance'] || 'No clinical significance information available.'}</p>
            </div>
        </div>
    `;
}

// Update pagination controls
function updatePagination() {
    const paginationElement = document.getElementById('pagination');
    const totalPages = Math.ceil(filteredData.length / itemsPerPage);
    
    let paginationHTML = `
        <nav aria-label="Page navigation">
            <ul class="pagination">
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="prev">Previous</a>
                </li>
    `;
    
    // Show limited page numbers with ellipsis for many pages
    if (totalPages <= 7) {
        // Show all pages if 7 or fewer
        for (let i = 1; i <= totalPages; i++) {
            paginationHTML += `
                <li class="page-item ${currentPage === i ? 'active' : ''}">
                    <a class="page-link" href="#" data-page="${i}">${i}</a>
                </li>
            `;
        }
    } else {
        // Show first page
        paginationHTML += `
            <li class="page-item ${currentPage === 1 ? 'active' : ''}">
                <a class="page-link" href="#" data-page="1">1</a>
            </li>
        `;
        
        // Show ellipsis or pages before current
        if (currentPage > 3) {
            paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
        
        // Pages around current
        for (let i = Math.max(2, currentPage - 1); i <= Math.min(totalPages - 1, currentPage + 1); i++) {
            if (i > 1 && i < totalPages) {
                paginationHTML += `
                    <li class="page-item ${currentPage === i ? 'active' : ''}">
                        <a class="page-link" href="#" data-page="${i}">${i}</a>
                    </li>
                `;
            }
        }
        
        // Show ellipsis or pages after current
        if (currentPage < totalPages - 2) {
            paginationHTML += `<li class="page-item disabled"><span class="page-link">...</span></li>`;
        }
        
        // Show last page
        paginationHTML += `
            <li class="page-item ${currentPage === totalPages ? 'active' : ''}">
                <a class="page-link" href="#" data-page="${totalPages}">${totalPages}</a>
            </li>
        `;
    }
    
    paginationHTML += `
                <li class="page-item ${currentPage === totalPages || totalPages === 0 ? 'disabled' : ''}">
                    <a class="page-link" href="#" data-page="next">Next</a>
                </li>
            </ul>
        </nav>
        <div class="mt-2 text-muted small">
            Showing ${Math.min(filteredData.length, (currentPage - 1) * itemsPerPage + 1)} to ${Math.min(filteredData.length, currentPage * itemsPerPage)} of ${filteredData.length} results
        </div>
    `;
    
    paginationElement.innerHTML = paginationHTML;
    
    // Add event listeners to pagination controls
    document.querySelectorAll('.page-link').forEach(link => {
        link.addEventListener('click', function(e) {
            e.preventDefault();
            const page = this.getAttribute('data-page');
            
            if (page === 'prev' && currentPage > 1) {
                currentPage--;
            } else if (page === 'next' && currentPage < totalPages) {
                currentPage++;
            } else if (page !== 'prev' && page !== 'next') {
                currentPage = parseInt(page);
            }
            
            displayResults();
            updatePagination();
            
            // Scroll to the top of the results
            document.getElementById('resultsArea').scrollIntoView({ behavior: 'smooth' });
        });
    });
}

// Initialize the application
document.addEventListener('DOMContentLoaded', () => {
    // Fetch data from Google Sheets
    fetchLabData();
    
    // Handle search button
    document.getElementById('searchBtn').addEventListener('click', () => {
        filterAndDisplayResults();
    });
    
    // Handle search on Enter key
    document.getElementById('searchInput').addEventListener('keypress', (e) => {
        if (e.key === 'Enter') {
            filterAndDisplayResults();
        }
    });
    
    // Handle category selection
    document.getElementById('categorySelect').addEventListener('change', () => {
        filterAndDisplayResults();
    });
    
    // Handle apply filters button
    document.getElementById('applyFilters').addEventListener('click', () => {
        filterAndDisplayResults();
    });
    
    // Handle reset filters button
    document.getElementById('resetFilters').addEventListener('click', () => {
        document.getElementById('searchInput').value = '';
        document.getElementById('categorySelect').value = 'all';
        document.getElementById('sampleTypeFilter').value = 'all';
        document.getElementById('populationFilter').value = 'all';
        document.getElementById('sortOrder').value = 'name-asc';
        
        filterAndDisplayResults();
    });
});
    </script>
</body>
</html>